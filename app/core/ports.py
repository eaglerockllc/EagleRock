from typing import Protocol, Iterable, Optional
from uuid import UUID
from app.core.entities import Event, Lane, RiskScore, RerouteProposal

class LaneRepositoryPort(Protocol):
    def get(self, lane_id: UUID) -> Optional[Lane]: ...
    def list(self) -> Iterable[Lane]: ...

class EventRepositoryPort(Protocol):
    def append(self, evt: Event) -> None: ...
    def exists_by_checksum(self, source: str, checksum: str) -> bool: ...
    def list_for_lane(self, lane_id: UUID, limit: int = 100) -> list[Event]: ...

class RiskRepositoryPort(Protocol):
    def save(self, score: RiskScore) -> None: ...
    def latest(self, lane_id: UUID) -> Optional[RiskScore]: ...

class RerouteRepositoryPort(Protocol):
    def save(self, r: RerouteProposal) -> None: ...
    def latest(self, lane_id: UUID): ...

class EventQueuePort(Protocol):
    def enqueue(self, lane_id: UUID) -> None: ...
    def dequeue_blocking(self, timeout: int = 5) -> UUID: ...
